generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id              Int               @id @default(autoincrement())
  name            String
  addressLine1    String
  addressLine2    String?
  districtId      Int
  postalCode      Int?
  landmark        String?
  isDeleted       Boolean           @default(false)
  district        district          @relation(fields: [districtId], references: [id])
  customerProfiles customerProfile[]
  sellerProfiles  sellerProfile[]
}

model category {
  id               Int        @id @default(autoincrement())
  name             String
  parentCategoryId Int?
  image            String?    @default(dbgenerated("false"))
  description      String?
  isDeleted        Boolean    @default(false)
  category         category?  @relation("categoryTocategory_parentCategoryId", fields: [parentCategoryId], references: [id])
  categories       category[] @relation("categoryTocategory_parentCategoryId")
  products         product[]
}

model district {
  id        Int       @id @default(autoincrement())
  name      String
  stateId   Int
  isDeleted Boolean   @default(false)
  state     state     @relation(fields: [stateId], references: [id])
  addresses  address[]
}

model product {
  id            Int           @id @default(autoincrement())
  name          String
  image         String
  price         Decimal       @db.Decimal
  description   String
  stock         Int
  categoryId    Int
  sellerId      Int
  isDeleted     Boolean?      @default(false)
  category      category      @relation(fields: [categoryId], references: [id])
  sellerProfile sellerProfile @relation(fields: [sellerId], references: [id])
  banners       banner[]
  carts         cart[]
  favourites    favourite[]
  orders        order[]
}

model state {
  id        Int        @id @default(autoincrement())
  name      String
  isDeleted Boolean    @default(false)
  districts district[]
}

model banner {
  id        Int      @id @default(autoincrement())
  name      String
  isActive  Boolean? @default(false)
  isDeleted Boolean  @default(false)
  image     String
  productId Int
  product   product  @relation(fields: [productId], references: [id])
}

model cart {
  id              Int             @id @default(autoincrement())
  productId       Int
  count           Int
  isDeleted       Boolean         @default(false)
  customerId      Int
  customer        customerProfile @relation(fields: [customerId], references: [id])
  product         product         @relation(fields: [productId], references: [id])
}

model customerProfile {
  id          Int         @id @default(autoincrement())
  firstName   String
  lastName    String
  phoneNumber String
  email       String?
  addressId   Int
  isDeleted   Boolean     @default(false)
  userId      Int
  address     address     @relation(fields: [addressId], references: [id])
  user        user @relation(fields: [userId], references: [id])
  carts       cart[]
  favourites  favourite[]
  orders      order[]
}

model favourite {
  id              Int             @id @default(autoincrement())
  productId       Int
  customerId      Int
  isDeleted       Boolean         @default(false)
  customer        customerProfile @relation(fields: [customerId], references: [id])
  product         product         @relation(fields: [productId], references: [id])
}

model order {
  id              Int             @id @default(autoincrement())
  productId       Int
  customerId      Int
  shippingDate    DateTime        @db.Timestamptz(6)
  isDelivered     Boolean?
  isDeleted       Boolean         @default(false)
  orderDate       DateTime        @db.Timestamptz(6)
  customer        customerProfile @relation(fields: [customerId], references: [id])
  product         product         @relation(fields: [productId], references: [id])
}

model role {
  id        Int        @id @default(autoincrement())
  name      String
  isDeleted Boolean    @default(false)
  userRoles userRole[]
}

model sellerProfile {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  phoneNumber Int
  email       String
  addressId   Int
  isApproved  Boolean?  @default(false)
  isDeleted   Boolean?  @default(false)
  user        Int
  address     address   @relation(fields: [addressId], references: [id])
  products    product[]
}

model userRole {
  id          Int         @id @default(autoincrement())
  roleId      Int
  userId      Int
  role        role        @relation(fields: [roleId], references: [id])
  user        user @relation(fields: [userId], references: [id])
}

model user {
  id                  Int               @id @default(autoincrement())
  name                String?
  userName            String            @unique
  password            String?
  salt                String?
  forcePasswordChange Boolean?
  passwordValidFrom   Int?
  isActive            Boolean?          @default(true)
  lastLoginDateTime   DateTime?         @db.Timetz(6)
  isDeleted           Boolean?          @default(false)
  customerProfiles    customerProfile[]
  userRoles           userRole[]
}

model entityState {
  id                                                                  Int                   @id @default(autoincrement())
  name                                                                String?
  type                                                                String?
  isDeleted                                                           Boolean?              @default(false)
  isDefault                                                           Boolean?
  entityStateProgress_entityStateToentityStateProgress_currentStateId entityStateProgress[] @relation("entityStateToentityStateProgress_currentStateId")
  entityStateProgress_entityStateToentityStateProgress_nextStateId    entityStateProgress[] @relation("entityStateToentityStateProgress_nextStateId")
}

model entityStateProgress {
  id                                                          Int         @id
  currentStateId                                              Int
  nextStateId                                                 Int
  currentState entityState @relation("entityStateToentityStateProgress_currentStateId", fields: [currentStateId], references: [id])
  nextState   entityState @relation("entityStateToentityStateProgress_nextStateId", fields: [nextStateId], references: [id])
}
