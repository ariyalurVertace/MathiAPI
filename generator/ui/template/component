  constructor(props) {
    super(props)
    this.state = {##STATE##}
  }

  componentDidMount() {
    this.GetAll##MODEL_NAME##();

    ##MODEL_FOREIGN_CALL##

  }

  GetAll##MODEL_NAME##() {
    this.setState({
      isLoading: true,
    })
    const { ListRequestModel } = this.state

    CallService(
      ##MODEL_NAME_CAMELCASE##.GetAll,
      MethodType.POST,
      false,
      ListRequestModel,
      "",
      this.GetAll##MODEL_NAME##Response
    )
  }

  GetAll##MODEL_NAME##Response = data => {
    if (data.pagination && data.result) {
      this.setState({
        isLoading: false,
        totalPage: data.pagination.totalCount / data.pagination.pageLimit,
        ##MODEL_NAME_CAMELCASE##List: data.result,
        totalCount: data.pagination.totalCount,
      })
    } else
      this.setState({
        isLoading: false,
      })
  }

  ##GetAllForeign##


  /** handle list page  start  */
  handleSort = (column, sortDirection) => {
    var sortObj = {}
    sortObj[column.selector] = sortDirection === "asc" ? "asc" : "desc"
    this.setState(
      {
        ListRequestModel: {
          ...this.state.ListRequestModel,
          sortCondition: sortObj,
        },
      },
      function () {
        this.GetAll##MODEL_NAME##()
      }
    )
  }

  handlePerRowsChange = async perPage => {
    this.setState(
      {
        pageLimit: perPage,
        pageNumber: 1,
        ListRequestModel: {
          ...this.state.ListRequestModel,
          pageLimit: perPage,
          pageNumber: 1,
        },
      },
      async function () {
        this.GetAll##MODEL_NAME##()
      }
    )
  }

  handlePageChange = async page => {
    this.setState(
      {
        pageNumber: page,
        ListRequestModel: {
          ...this.state.ListRequestModel,
          pageNumber: page,
        },
      },
      function () {
        this.GetAll##MODEL_NAME##()
      }
    )
  }

  SearchQueryChanged = search => {
    this.setState(
      {
        ListRequestModel: {
          ...this.state.ListRequestModel,
          searchString: search.target.value,
        },
      },
      function () {
        if (
          this.state.ListRequestModel.searchString === "" ||
          this.state.ListRequestModel.searchString.length > 2
        ) {
          this.GetAll##MODEL_NAME##()
        }
      }
    )
  }

  HandleRowClicked = row => {
    console.log(row)
    if (row) {
      this.setState({
        ##MODEL_NAME##: row,
        manageModal: !this.state.manageModal,
      })
    }
  }

  /** Submit Function Start */
  handleSubmit = values => {
    this.manage##MODEL_NAME##(values)
  }

  addBtnClick = () => {
    this.setState({
      ##MODEL_NAME##: {
        ##FIELD##: "",
      },
      manageModal: !this.state.manageModal,
    })
    //  this.toggleManageModal();
  }

  toggleDeleteModal = row => {
    this.setState({
      deleteModal: !this.state.deleteModal,
      ##MODEL_NAME##: row,
    })
  }

  toggleManageModal = () => {
    this.setState({
      ##MODEL_NAME##: {},
      manageModal: !this.state.manageModal,
    })
  }

  delete##MODEL_NAME## = id => {
    CallService(
      ##MODEL_NAME_CAMELCASE##.Delete + id,
      MethodType.DELETE,
      false,
      "",
      "",
      this.delete##MODEL_NAME##Response
    )
  }

  delete##MODEL_NAME##Response = data => {
    this.setState({
      buttonAction: false,
    })
    this.toggleDeleteModal()
    if (data.statusCode === StatusCodes.Success) {
      SuccessMessage("", "##PAGE_TITLE## Deleted Successfully")
      this.GetAll##MODEL_NAME##()
    }
  }

  manage##MODEL_NAME## = values => {
    CallService(
      values.id ? ##MODEL_NAME_CAMELCASE##.Update + values.id : ##MODEL_NAME_CAMELCASE##.Create,
      values.id ? MethodType.PATCH : MethodType.PUT,
      false,
      values,
      "",
      this.manage##MODEL_NAME##Response
    )
  }

  manage##MODEL_NAME##Response = async data => {
    if (data.statusCode === StatusCodes.Success) {
      SuccessMessage(
        "",
        this.state.##MODEL_NAME##.id
          ? "##PAGE_TITLE## Updated Successfully"
          : "##PAGE_TITLE## Added Successfully"
      )
      if (data && !this.state.##MODEL_NAME##.id) {
        this.setState({
          ##MODEL_NAME##Detail: data.result,
          viewModal: !this.state.viewModal,
        })
      }
      this.GetAll##MODEL_NAME##()
      this.setState({
        buttonAction: false,
        manageModal: !this.state.manageModal,
      })
    } else {
      ErrorMessage("", "Something went wrong")
      this.setState({
        buttonAction: false,
      })
    }
  }

  handlemobilePageChange = async page => {
    //if (page * 9 < this.state.totalCount)
    this.setState(
      {
        currentpage: page,
        pageNumber: page,
        ListRequestModel: {
          ...this.state.ListRequestModel,
          pageNumber: page,
        },
      },
      function () {
        this.GetAll##MODEL_NAME##()
      }
    )
  }
  ToggleViewModal = url => {
    this.setState({
      viewModal: !this.state.viewModal,
      DocumentView: url,
      ##MODEL_NAME##Detail: url ? url : "",
    })
  }
